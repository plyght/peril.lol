---
import { Astro } from 'astro';
import { fade } from 'astro:transitions';
const currentPath = Astro.url.pathname;
---

<div class="nav-container">
  <nav class="site-nav">
    <a href="/" class:list={[{ active: currentPath === '/' }]} transition:animate="slide">Home</a>
    <a
      href="/blog"
      class:list={[{ active: currentPath.startsWith('/blog') }]}
      transition:animate="slide">Blog</a
    >
  </nav>
  <button id="theme-toggle" class="theme-toggle-nav" aria-label="Toggle dark/light mode">
    <div class="toggle-icon-container">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="sun-icon"
        ><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line
          x1="12"
          y1="21"
          x2="12"
          y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line
          x1="18.36"
          y1="18.36"
          x2="19.78"
          y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line
          x1="21"
          y1="12"
          x2="23"
          y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line
          x1="18.36"
          y1="5.64"
          x2="19.78"
          y2="4.22"></line></svg
      >
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        class="moon-icon"
        style="transform: translateY(-30px) translateX(-8px);"
      >
        <path
          d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </div>
  </button>
</div>

<script>
  // Theme toggle functionality
  const toggleBtn = document.getElementById('theme-toggle');

  // Check for saved theme preference or use OS preference
  const getTheme = () => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      return savedTheme;
    }
    return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
  };

  // Apply theme to document with improved handling
  const applyTheme = (theme) => {
    // Prevent rapid transitions by debouncing
    if (document.body.dataset.themeChanging === 'true') {
      return;
    }

    // Mark that we're changing theme to prevent multiple rapid changes
    document.body.dataset.themeChanging = 'true';

    // Add transition class for smoother color changes
    document.body.classList.add('theme-transition');
    document.documentElement.setAttribute('data-theme', theme);

    // Update icon visibility based on theme - ensure clean class state
    document.documentElement.classList.remove('dark-theme', 'light-theme');
    document.documentElement.classList.add(theme === 'dark' ? 'dark-theme' : 'light-theme');

    // Save theme preference
    localStorage.setItem('theme', theme);

    // Remove transition class after animation completes - reduced from 800ms to 400ms for mobile
    setTimeout(() => {
      document.body.classList.remove('theme-transition');
      document.body.dataset.themeChanging = 'false';
    }, 400);
  };

  // Initialize theme
  applyTheme(getTheme());

  // Toggle theme when button is clicked
  toggleBtn.addEventListener('click', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    applyTheme(newTheme);
  });

  // Listen for OS theme changes
  window.matchMedia('(prefers-color-scheme: light)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      applyTheme(e.matches ? 'light' : 'dark');
    }
  });

  // Properly handle view transitions when theme changes
  document.addEventListener('astro:after-swap', () => {
    // Re-apply theme after page transition with a slight delay for stability
    setTimeout(() => {
      const savedTheme = localStorage.getItem('theme');
      const theme =
        savedTheme ||
        (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');
      applyTheme(theme);

      // Ensure the toggle button is initialized correctly after page transition
      const toggleBtn = document.getElementById('theme-toggle');
      if (toggleBtn) {
        toggleBtn.addEventListener('click', () => {
          const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          applyTheme(newTheme);
        });
      }
    }, 50); // Small delay for stability
  });
</script>
